#!/usr/bin/python2
import sys
from os import mkdir, listdir, path, remove, chdir, getcwd
from shutil import rmtree
from xml.dom import minidom
import subprocess
from sys import platform as _platform
import optparse

def split_file(filename, to_dir):
    if path.exists(to_dir):
        rmtree(to_dir)
    mkdir(to_dir)
    f = open(filename, 'rb')
    data = f.read()
    f.close()
    if data[:2] == '\xff\xfe':
        data = data.decode('utf16').encode('utf8')
    i_lines = [line + '\n' for line in data.splitlines()]
    loc_name = (i_lines[0][2:-1]).decode('utf-8')
    ff = open(to_dir + loc_name.lower() + '.txt', 'w')
    for line in i_lines:
        if line[0] == '#' and line[1] == ' ':
            ff.close()
            loc_name = (line[2:-1]).decode('utf-8')
            ff = open(to_dir + loc_name.lower() + '.txt', 'w')
        ff.write(line)

    if _platform == "linux" or _platform == "linux2":
        files = listdir(unicode(to_dir, 'utf-8'))
        files = [to_dir + s for s in files]
        subprocess.call(["unix2dos"] + files)


def merge_file(dir, filename, mode):
    file_list = listdir(unicode(dir, 'utf-8'))
    xmldoc = minidom.parse('jack.qproj')

    location_order = xmldoc.getElementsByTagName('Location')
    locations = []
    for s in location_order:
        locations.append(s.attributes['name'].value.lower() + '.txt')
    #   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    # For some god-forsaken reason it removes the '#' in front of the following locations, and appends them last:
    #
    # estate_base.txt
    # help_msg.txt
    # masters_base.txt
    # options.txt
    # place_base.txt
    # sex_options.txt
    # txt.txt
    # var_base.txt
    #
    # I really cannot figure out why. I have also tried to parse the document with ElementTree - same error.
    # I see no pattern and it is driving me nuts.
    # However, it doesn't really have an effect, since the correct locations will be added, but as unordered.

    unordered_locations = [x for x in file_list if x not in locations] # Create a list with all elements found in file_list,
                                                                       # _and_ not found in locations (qproj)
    locations += unordered_locations

    temp_file = filename + ".tmp"

    f = open(temp_file, 'wb')

    if mode == 'utf16':
        f.write('\xff\xfe')

    for file in locations:
        if not path.isfile(path.join(dir, file)):
            continue # if there is a nonexistant entry in the qproj file, just skip it (like the files above)

        file_n = path.join(dir, file)

        ff = open(file_n, 'rb')
        data = ff.read()

        if mode == 'utf16':
            data = data.decode('utf8').encode(mode)
            f.write(data[2:])
        else:
            f.write(data)

        ff.close()

    f.close()
    
    if _platform == "linux" or _platform == "linux2":
        subprocess.call(["wine", "txt2gam.exe", temp_file, filename])
    elif _platform == "win32":
        subprocess.call(["txt2gam.exe", temp_file, filename])

    remove(temp_file)

def main():
    parser = optparse.OptionParser()

    parser.add_option('-s', '--split-from',
        action="store", dest="txt_filename",
        help="Split a txt2gam txt file (generated by QGen), to individual files.")

    parser.add_option('-m', '--merge-to',
        action="store", dest="qsp_filename",
        help="Merge src directory to a qsp file")

    options, args = parser.parse_args()

    dist_dir = 'src/'

    if options.txt_filename:
        split_file(options.txt_filename, dist_dir)

    if options.qsp_filename:
        merge_file(dist_dir, options.qsp_filename, 'utf16')
    
if __name__ == '__main__':
  main()
